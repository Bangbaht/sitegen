#!/usr/bin/env node

import program                from 'commander';
import evaluate               from 'eval';
import http                   from 'http';
import path                   from 'path';
import express                from 'express';
import Webpack                from 'webpack';
import WebpackDevMiddleware   from 'webpack-dev-middleware';
import WebpackHotMiddleware   from 'webpack-hot-middleware';
import React                  from 'react';
import {renderToStaticMarkup} from 'react-dom/server';
import pkg                    from '../../package.json';
import Site                   from '../Site';
import configureFromDirectory from '../configureFromDirectory';

program
  .version(pkg.version)
  .usage('sitegen-serve [options] <site>')
  .description('Serve site')
  .option('-L, --lib <directory>', 'site library directory (default: $site/lib)')
  .parse(process.argv);

let cwd = process.cwd();
let site = path.join(cwd, program.args[0] || '.');

let config = configureFromDirectory(site, {
  lib: program.lib,
  output: program.output,
  mode: 'serve',
  dev: true,
  compilerName: 'sitegen'
});

let compiler = Webpack(config);
let devMiddleware = WebpackDevMiddleware(compiler, {quiet: true});
let hotMiddleware = WebpackHotMiddleware(compiler, {log: false});

let app = express();

app.use(devMiddleware);
app.use(hotMiddleware);
app.use(render);
app.listen(3000);

function render(req, res, next) {
  http.get('http://localhost:3000/_bootstrap.js', function(bootstrapRes) {
    let source = '';
    bootstrapRes.setEncoding('utf8');
    bootstrapRes.on('data', chunk => source = source + chunk);
    bootstrapRes.on('end', () => {
      let routes = evaluate(source, '<bootstrap>', {window: {fake: true}});
      let Component = routes.component || Site;
      let markup = renderToStaticMarkup(<Component />);
      res.send(markup);
    });
  }).on('error', next);
}
